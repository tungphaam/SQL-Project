--Question 1​. Using the AdventureWorks database you have access to, 
--write a SQL query that will retrieve only the first, middle, and last name of each person 
--within the ​Person.Person​ table listed in alphabetical order by last name.
SELECT FirstName, MiddleName, LastName
FROM Person.Person
ORDER BY LastName, FirstName, MiddleName;

--Question 2​. Same as the last question but in reverse alphabetical order (last name).
SELECT FirstName, MiddleName, LastName
FROM Person.Person
ORDER BY LastName DESC, FirstName DESC, MiddleName DESC;

--Question 3​. Using the AdventureWorks database you have access to, 
--examine the Sales.SalesOrderDetail​ table. Write a SQL query that retrieves all line items showing the 
--sales order ID, product ID, the quantity, and the line total. Sort the result in increasing order 
--by lineTotal but keep each order together in the results.
SELECT SalesOrderID, ProductID, OrderQty, LineTotal
FROM Sales.SalesOrderDetail
ORDER BY SalesOrderID, LineTotal;

--Question 4​. Using the AdventureWorks database you have access to, 
--write a SQL query that counts the total number of orders from the ​Sales.SalesOrderHeader​ table.
SELECT COUNT(*) AS TotalOrders
FROM Sales.SalesOrderHeader;

--Question 5​. Using the AdventureWorks database you have access to, 
--write a SQL query that determines the total number of orders from the ​Sales.SalesOrderHeader​ table 
--where the total order cost (TotalDue) exceeds $10,000.
SELECT COUNT(*) AS TotalHighOrders
FROM Sales.SalesOrderHeader
WHERE TotalDue > 10000;

--Question 6​. Using the AdventureWorks database you have access to, 
--examine the HumanResources.Employee​ table. Each listed employee has a value for VacationHours. 
--Write a SQL query to calculate the total number of vacation hours that all employees have together.
SELECT SUM(VacationHours) AS TotalVacationHours
FROM HumanResources.Employee

--Question 7​. Using the AdventureWorks database you have access to, 
--re-examine the Sales.SalesOrderDetail​ table. Each row represents an individual line item for an order. 
--Using this table only, write a SQL query that will calculate the sum of all line items for EACH SalesOrderID. 
--The results of the query can display just {SalesOrderID, SumTotal}.
SELECT SalesOrderId, SUM(LineTotal) AS SumTotal
FROM Sales.SalesOrderDetail
GROUP BY SalesOrderId;

--Question 8​. Using the AdventureWorks database you have access to, 
--consider a query using the Production.Product​ table that returns the ProductID for the product with 
--name “Mountain Bike Socks, M”. Now write a SQL query against the ​Sales.SalesOrderDetail ​table that 
--returns the sales order ids for orders which have at least one line item containing that product. 
--Solve this by using a subquery.
SELECT DISTINCT (SalesOrderID)
FROM Sales.SalesOrderDetail
WHERE ProductID IN (
    SELECT ProductID
    FROM Production.Product
    WHERE Name = 'Mountain Bike Socks, M'
);

--Question 9. Using [Production].[Product] and [Sales].[SalesOrderDetail] tables, return a table showing Product Name, OrderQty, OrderQty Rank.
-- (Rank the products by orderqty, partition by Product categoryID)
WITH RankedProducts AS (
    SELECT
        p.Name AS ProductName,
        sod.OrderQty,
        RANK() OVER (PARTITION BY p.ProductSubcategoryID ORDER BY sod.OrderQty DESC) AS OrderQtyRank
    FROM
        Production.Product AS p
    JOIN
        Sales.SalesOrderDetail AS sod ON p.ProductID = sod.ProductID
)
SELECT
    ProductName,
    OrderQty,
    OrderQtyRank
FROM
    RankedProducts;

--Question 10. Using HumanResources.Employee table, return a table contains Job title, average age for that job title (Only show average age >= 50 years old, otherwise return null).
SELECT
    JobTitle,
    CASE
        WHEN AVG(DATEDIFF(YEAR, BirthDate, GETDATE())) >= 50 THEN AVG(DATEDIFF(YEAR, BirthDate, GETDATE()))
        ELSE NULL
    END AS AverageAge
FROM
    HumanResources.Employee
GROUP BY
    JobTitle;
